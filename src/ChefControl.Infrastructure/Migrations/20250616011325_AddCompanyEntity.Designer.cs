// <auto-generated />
using System;
using ChefControl.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChefControl.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250616011325_AddCompanyEntity")]
    partial class AddCompanyEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChefControl.Domain.CompanyContext.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("Deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_company_id");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("ChefControl.Domain.CompanyContext.Entities.Company", b =>
                {
                    b.OwnsOne("ChefControl.Domain.CompanyContext.ValueObjects.CompanyName.CompanyName", "CompanyName", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("text")
                                .HasColumnName("name")
                                .HasAnnotation("MinLength", (byte)3);

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("text")
                                .HasColumnName("trading_name")
                                .HasAnnotation("MinLength", (byte)3);

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Name" }, "uq_company_name");

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("ChefControl.Domain.CompanyContext.ValueObjects.TaxId.CompanyTaxId", "TaxId", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("text")
                                .HasColumnName("value");

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Value" }, "uq_company_tax_id")
                                .IsUnique();

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("ChefControl.Domain.SharedContext.ValueObjects.Email.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Value" }, "uq_company_email")
                                .IsUnique();

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("ChefControl.Domain.SharedContext.ValueObjects.Phone.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("text")
                                .HasColumnName("phone");

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Value" }, "uq_company_phone")
                                .IsUnique();

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("CompanyName")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("TaxId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
